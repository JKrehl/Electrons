#!/usr/bin/env python
"""
Copyright (c) 2015 Jonas Krehl <Jonas.Krehl@triebenberg.de>

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
"""

import numpy


class AbstractArray:
	_modes = ("numpy", "cluda")

	def __new__(cls, *args, **kwargs):
		self = object.__new__(cls)

		self.ndarray = None
		self.cluda_thread = None
		self.cluda_array = None

		self.mode = None
		self.array = None
		return self

	def __init__(self, ndarray=None, thread=None, mode=None):
		if thread is not None:
			self.cluda_thread = thread
		if ndarray is not None:
			self.ndarray = ndarray

		if mode is not None:
			self.set_mode(mode)
		elif self.ndarray is not None:
			self.set_mode("numpy")

	def __getitem__(self, key):
		return self.array.__getitem__(key)

	def __setitem__(self, key, value):
		return self.array.__setitem__(key, value)

	def __getattr__(self, name):
		return self.array.__getattribute__(name)

	def set_mode(self, mode):
		assert mode in self._modes
		if mode == self.mode:
			pass
		else:
			if self.mode == "cluda":
				self.cluda_thread.from_device(self.cluda_array, self.ndarray)

			if mode == "numpy":
				self.array = self.ndarray
			elif mode == "cluda":
				if self.cluda_array is None:
					self.cluda_array = self.cluda_thread.to_device(self.ndarray)
				else:
					self.cluda_thread.to_device(self.ndarray, self.cluda_array)
				self.array = self.cluda_array

			self.mode = mode